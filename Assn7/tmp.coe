memory_initialization_radix=2;
memory_initialization_vector=
0: 00000 00001 00001 00000 00011 0000000,// xor r1, r1;
4: 00100 00001 00000 00000 00000 0000010,// addi r1, 2;
8: 00000 00001 00001 00000 00100 0000000;// shllv r1, r1;
// store word
r1 -> 8
12: 00000 00010 00010 00000 00011 0000000,// xor r2, r2;
16: 00100 00010 00000 00000 00000 0000101,// addi r2, 5;
sw rt, imm(rs) - sw r2, 0(r1) 8 

20: 00011 00001 00010 00000 00000 0000000, 

lw r3, 3(r2) // r3 <- 5
24: 00010 00010 00011 00000 00000 0000011

b 36 
28: 00110 00000 00000 00000 00000 0000100,

32: 00000 00011 00011 00000 00011 0000000, // xor r3, r3

36: 00100 00001 00000 00000 00000 0000010, // addi r1, 2 r3 <- 5

========================================================================
4:r0 ^= r0
00000 00000 00000 00000 00011 0000000
8: lw $r1, 0(r0)
00010 00000 00001 00000 00000 0000000
12: lw, $r2, 4(r0)
00010 00000 00010 00000 00000 0000100
16: loop: bz r2, 56
01000 00010 00011 00000 00000 0111000
20: r3 = 2comp (r1);
00000 00011 00001 00000 00001 0000000
24: r3 += r2;
00000 00011 00010 00000 00000 0000000
// r3 = r2 - r1

if r3 == 0
28: bz r3, answer
01000 00011 00011 00000 00000 0101100
32: bltz r3, subtract;  if r1 > r2 -> 
01000 00011 00100 00000 00000 0000100
36: b swap; 8
00110 00000 00000 00000 00000 0001000

40: subtract: r4 = 2scomp (r2)
00000 00100 00010 00000 00001 0000000
44: r1 += r4
00000 00001 00100 00000 00000 0000000
48: swap: r3 ^= r3;
00000 00011 00011 00000 00011 0000000
52: r3 += r1;
00000 00011 00001 00000 00000 0000000
56: r1 ^= r1;
00000 00001 00001 00000 00011 0000000
60: r1 += r2;
00000 00001 00010 00000 00000 0000000
64: r2 ^= r2;
00000 00010 00010 00000 00011 0000000
68: r2 += r3;
00000 00010 00011 00000 00000 0000000
b loop;
72: 00110 00000 00000 11111 11111 1000100
# fix the last few bits
answer
76: 00011 00000 00001 00000 00000 0001000
inf loop:
80: 00110 00000 00000 11111 11111 1111100


