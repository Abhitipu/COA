$date
	Sat Apr 17 15:47:32 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module RippleCarryAdder_tb $end
$var wire 4 ! sum [3:0] $end
$var wire 1 " cout $end
$var reg 4 # a [3:0] $end
$var reg 4 $ b [3:0] $end
$var reg 1 % cin $end
$scope module rca $end
$var wire 4 & A [3:0] $end
$var wire 4 ' B [3:0] $end
$var wire 1 % cin1 $end
$var wire 1 " cout1 $end
$var wire 1 ( c3 $end
$var wire 1 ) c2 $end
$var wire 1 * c1 $end
$var wire 4 + S [3:0] $end
$scope module fa0 $end
$var wire 1 , a $end
$var wire 1 - b $end
$var wire 1 % cin $end
$var wire 1 * cout $end
$var wire 1 . sum $end
$var wire 1 / w1 $end
$var wire 1 0 w2 $end
$var wire 1 1 w3 $end
$var wire 1 2 w4 $end
$upscope $end
$scope module fa1 $end
$var wire 1 3 a $end
$var wire 1 4 b $end
$var wire 1 * cin $end
$var wire 1 ) cout $end
$var wire 1 5 sum $end
$var wire 1 6 w1 $end
$var wire 1 7 w2 $end
$var wire 1 8 w3 $end
$var wire 1 9 w4 $end
$upscope $end
$scope module fa2 $end
$var wire 1 : a $end
$var wire 1 ; b $end
$var wire 1 ) cin $end
$var wire 1 ( cout $end
$var wire 1 < sum $end
$var wire 1 = w1 $end
$var wire 1 > w2 $end
$var wire 1 ? w3 $end
$var wire 1 @ w4 $end
$upscope $end
$scope module fa3 $end
$var wire 1 A a $end
$var wire 1 B b $end
$var wire 1 ( cin $end
$var wire 1 " cout $end
$var wire 1 C sum $end
$var wire 1 D w1 $end
$var wire 1 E w2 $end
$var wire 1 F w3 $end
$var wire 1 G w4 $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0G
0F
1E
0D
0C
1B
1A
0@
0?
0>
0=
0<
0;
0:
09
08
07
16
15
14
03
02
01
00
0/
1.
0-
0,
b11 +
0*
0)
0(
b1010 '
b1000 &
1%
b1010 $
b1000 #
1"
b11 !
$end
#20
05
1<
1C
0"
06
1=
1D
0E
04
1:
0A
b1000 $
b1000 '
b100 #
b100 &
b1100 !
b1100 +
0.
0%
#40
15
0C
0<
1*
0D
10
0=
b11 !
b11 +
1.
11
12
1-
0B
1,
0:
1%
b1 $
b1 '
b1 #
b1 &
#60
